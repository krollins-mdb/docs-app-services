.. _realm-sync-migrate-modes:

=========================
Migrate Device Sync Modes
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Atlas App Services Apps can have one of two Device Sync modes: Partition-Based Sync
and Flexible Sync. Partition-Based Sync is an older mode and you should consider
migrating to Flexible Sync.

Migrating an App Services App that uses Partition-Based Sync to Flexible Sync is
an automatic process. Other than upgrading the SDK version, migrating Sync modes
doesn't require any changes to your client app code.

Migration results in Partition-Based Sync clients communicating with a
Flexible Sync backend. We recommend eventually :ref:`migrating your client app 
<realm-sync-migrate-client>` to also use Flexible Sync instead of
Partition-Based Sync.

Requirements
------------

App Services App:

- Currently use Partition-Based Sync

Linked Atlas Cluster:

- Use MongoDB 5.0 or later for Flexible Sync compatibility
- Have storage auto-scaling enabled
- Be an M10+ Cluster Tier
- Have time-based oplog setting enabled

Client apps:

- ``realm-core`` v13.10.0 or later, which is included in these SDK versions:
  - Kotlin SDK v1.8.0

.. _realm-sync-migrate-what-to-know:

What to Know Before Migrating
-----------------------------

Migrating your App's Sync mode involves changes that affect both client apps and
your App's backend. You should be aware of the effects and plan ahead.

- Client apps that use an SDK with with a ``realm-core`` version earlier than
  v13.10.0 will not be able to sync after migration.
- How long a migration takes is directly proportional to the amount of data that
  needs to be migrated. The more data, the longer it will take to migrate.
- Migrations can be :ref:`canceled <realm-sync-migrate-cancel>` during the 
  migration or :ref:`reverted <realm-sync-migrate-revert>` within a certain 
  timeframe after the migration is finished.
- Progress notifications will not work after migration because Flexible Sync does
  not support them.  
- Client apps that were connected to the Partition-Based Sync backend will 
  experience a client reset after the backend is migrated to Flexible Sync. You 
  should use a :ref:`client reset <handle-a-client-reset>` handler with recovery enabled.
- Creating new tables in a migrated Flexible Sync backend using 
  :ref:`Development Mode <development-mode>` from a Partition-Based Sync client
  may lead to unexpected behavior.

.. _realm-sync-migrate-stages:

Migration Stages
~~~~~~~~~~~~~~~~

You can see your migration's stage in the App Services UI. There are three stages
to a Sync mode migration:

#. **Syncing Partition-Based Sync metadata** 
   
   At this stage, client apps can connect to your App's backend, but local writes 
   will not sync. These writes will be lost if you don't have a 
   :ref:`client reset handler <handle-a-client-reset>` to recover unsynced changes.
	 
   Clients can also receive updates to synced collections, but they won't
   be able to receive upload acknowledgements.

#. **Building Flexible Sync metadata** 
   
   Clients cannot connect at this stage. The duration of this stage is directly
   proportional to the amount of data in synced collections.

#. **Completed migration** 

   :guilabel:`Manage Sync Migration` appears on the Device Sync page if the 
   migration hasn't been committed or reverted.

After the migration has finished, check out the :ref:`After Migration
<realm-sync-migrate-after>` section for more information about how
Partition-Based Sync clients interact with the Flexible Sync backend.

Migrate Partition-Based Sync to Flexible Sync
---------------------------------------------

After beginning migration from Partition-Based Sync to Flexible Sync, the process
is mostly automatic. However, you can control important parts of the migration.

During a migration, you can cancel it. After a migration, you can revert it 
or manually commit the migration.

Begin Migration
~~~~~~~~~~~~~~~

Before you begin a migration, make sure you're aware of the
:ref:`migration stages <realm-sync-migrate-stages>` and
:ref:`effects <realm-sync-migrate-what-to-know>`.

Migration generally has similar effects as :ref:`terminating <terminating-realm-sync>` 
and re-enabling Device Sync. There are some additional effects of migration:

- In the App Services UI, the Rules and Schema pages will be read-only.
- Your App will experience a period of read-only Sync and then a 
  period of downtime.
- The new Flexible Sync configuration will set 
  :ref:`client max offline time <client-maximum-offline-time>` to 30 days.
- Storage in your Atlas cluster used by Device Sync metadata is temporarily doubled.
  Partition-Based Sync metadata and Flexible Sync metadata must temporarily co-exist. 
  Depending on the size of your synced data, this could affect billing every time you
  migrate.

**To migrate from Partition-Based Sync to Flexible Sync:** 

#. In the App Services UI, go to your App and select the Device Sync page.
#. At the top of the page, select :guilabel:`[Migrate to Flexible Sync]`.
   
   .. image:: /images/begin-migration.png
      :alt: Begin a migration
   
#. Read the information about migrating, then select 
   :guilabel:`Next: Migration Requirements`.
#. Ensure you meet the migration requirements, the select 
   :guilabel:`Start Migration`.

.. note:: Temporary Sync Disruption

   Clients will not be able to sync their local writes until the migration has
   completed.

After a migration is completed, Partition-Based Sync client apps can communicate
with your App's Flexible Sync backend. You can disable and re-enable Flexible Sync
and client apps will still communicate with your backend.

If you re-enable Partitition-Based Sync you will lose the "migrated" status.
This means you'll need to to another migration if you want to use Flexible Sync
on the backend with Partition-Based Sync client apps.

Migrate Permissions and Rules
`````````````````````````````

Your App's permissions and rules will be automatically migrated if the Partition-Based
Sync rules have direct App Services Rules equivalents. This will override
previously-defined App Services Rules.

In step 4 above, you will see if your permissions and rules can be automatically
migrated. On the :guilabel:`Review Migration Process` step in the App Services UI,
look for :guilabel:`Rules & Permisssions`.

Some Partition-Based Sync rule strategies can't translate directly to App Services
Rules. You may need to manually migrate permissions that include:

- :json-operator:`%function` operator.

  :ref:`Function rules <pbs-function-rules>` are not compatible with Flexible Sync 
  and cannot be migrated.

- :json-expansion:`%%partition` expansion.

  App Services Rules do not have an equivalent expansion for  
  :json-expansion:`%%partition`, so it cannot be migrated.

- ``%or``, ``%not``, ``%nor``, ``%and`` expansions.

  These permissions may work, but there is enough nuance that you should test them
  to ensure expected behavior. Testing new permissions won't work on the App
  you are migrating. You'll need a new app to test manually-migrated permissions.

See the list of :ref:`Flexible Sync-compatible expansions <sync-compatible-expansions>`
for all supported expansions.

You should also check out the 
:ref:`Device Sync Permissions Guide <flexible-sync-permissions-guide>` for more
information about how to work with permissions.

.. _realm-sync-migrate-cancel:

Cancel Migration
~~~~~~~~~~~~~~~~

You can cancel a migration at any time while it is in progress. This will return
your App the Partition-Based Sync, with all settings as they were before the
migration started.

If you cancel a migration, you need to start over from the beginning with future
migration attempts.

**To cancel a migration:** 

#. In the App Services UI, go to your App and select the Device Sync page.
#. At the top of the page, in the notification banner, select
   :guilabel:`Stop Migration`.
   
   .. image:: /images/cancel-migration.png
      :alt: Cancel a migration
   
   This will cancel your migration. You will need to migrate again if you want to
   enable Flexible Sync in the future.

.. _realm-sync-migrate-commit:

Commit Migration
~~~~~~~~~~~~~~~~

After your migration has completed, it is in an evaluation state. You can manually
commit the migration to make it permanent or revert the migration to return your
App to Partiton-Based Sync.

If you don't commit or revert the migration, it will automatically commit
according to your 
:atlas:`minimum oplog window </atlas/cluster-additional-settings/#set-minimum-oplog-window>`. 
For example, if your minimum oplog window is 48 hours, you will have 48 hours to
revert your migration.

After a migration is committed, the old Partition-Based Sync metadata is deleted
and you cannot revert the migration.

**To manually commit a migration:** 

#. In the App Services UI, go to your App and select the Device Sync page.
#. At the top of the page, select the three dots next to 
   :guilabel:`Manage Sync Migration`.
#. From the list of options, select :guilabel:`Commit migration to Flexible Sync`.
   
   .. image:: /images/commit-migration.png
      :alt: Commit a migration
#. Confirm migration commit by typing "Commit", then select :guilabel:`Commit`.
   
   .. image:: /images/confirm-migration-commit.png
      :alt: Confirm migration commit
   
   This will commit your migration and you will not be able to recover your
   Partition-Based Sync Metadata.

.. _realm-sync-migrate-revert:

Revert Migration
~~~~~~~~~~~~~~~~

You can revert a migration after it has completed and before it has been committed.

Completed migrations are automatically committed in accordance with your 
:atlas:`minimum oplog window </atlas/cluster-additional-settings/#set-minimum-oplog-window>`.
You can increase or decrease the amount of time you have to 
revert a migration by adjusting the minimum oplog window.

You cannot revert a migration that has been committed.

Similar to canceling a migration, if you revert a migration, you need to 
start over from the beginning with future migration attempts.

**To revert a migration:** 

#. In the App Services UI, go to your App and select the Device Sync page.
#. At the top of the page, select the three dots next to 
   :guilabel:`Manage Sync Migration`.
#. From the list of options, select 
   :guilabel:`Revert back to Partition-Based Sync`.
   
   .. image:: /images/revert-migration.png
      :alt: Revert a migration
   
   This will revert your migration. You will need to migrate again if you 
   want to enable Flexible Sync in the future.

.. _realm-sync-migrate-after:

After Backend Migration
-----------------------

Your migrated backend uses a partition key field in your Realm object models
to map the Partition-Based Sync client objects to Flexible Sync equivalents on
the backend. If your object models don't have a partition key field, the
backend automatically injects one into every object the Partition-Based Sync
client creates.

These are some other characteristics of the injected field you should be aware
of:

- The injected field follows this structure: ``<yourPartitionKey> == 
  <yourPartitionValue>``. Both the field key is derived from your old
  Partition-Based Sync  **backend**  configuration. The value is derived from
  your current Partition-Based Sync  **client**  configuration.
- The injected field does not sync back to the client that created the object.
  This means the originating client won't be able to read the injected
  ``partitionKey`` field.

The Partition-Based Sync client automatically creates sync subscriptions for 
each table where ``partitionKey == partitionValue``. This will continue
until you :ref:`migrate your client app <realm-sync-migrate-client>` to
Flexible Sync.

.. _realm-sync-migrate-client:

Migrate Client App to Flexible Sync
-----------------------------------

After your app's backend has been migrated to Flexible Sync, we recommend
that you also migrate your client app to Flexible Sync. When you migrate your
client app to Flexible Sync, the client will stop automatically creating
sync subscriptions for each Realm object model in your app's data model.

We also recommend removing all sync subscriptions and then creating new subscriptions
for your data. This is the clearest way to control what data is synced after a
migration.

You can keep these subscriptions if you don't want to remove and recreate
subscriptions. See the SDK documentation for details about adding and removing
subscriptions.

- Flutter SDK
   :ref:`Manage Flexible Sync Subscriptions - Flutter SDK <flutter-flexible-sync-manage-subscriptions>`

- Java SDK
   :ref:`Flexible Sync - Java SDK <java-flexible-sync>`

- Kotlin SDK
   :ref:`Subscribe to Queryable Fields - Kotlin SDK <kotlin-subscriptions>`

- .NET SDK
   :ref:`Manage Flexible Sync Subscriptions - .NET SDK <dotnet-flexible-sync>`

- Node.js SDK
   :ref:`Flexible Sync - Node.js SDK <node-flexible-sync>`

- React Native SDK
   :ref:`Flexible Sync - React Native SDK <react-native-flexible-sync>`

- Swift SDK
   :ref:`Manage Flexible Sync Subscriptions - Swift SDK <swift-manage-flexible-sync-subscriptions>`

If you don't remove all subscriptions, the automatically-created subscriptions
will remain, but you won't see them in your client code. This makes it harder
to understand what data is available to your client app.
